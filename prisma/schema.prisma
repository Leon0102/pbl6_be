// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  HOST
  GUEST
}

model Role {
  id        Int      @id @default(autoincrement())
  name      RoleType @unique
  users     User[]
  @@map("roles")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  phone    String?
  isVerified Boolean @default(false) @map("is_verified")
  isDeleted Boolean @default(false) @map("is_deleted")
  point    Int      @default(0)
  avatar   String?  
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int     @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  reservations Reservation[]
  properties Property[]
  @@map("users")
}
enum PropertyType {
  APARTMENT
  VILLA
  HOTEL
  RESORT
  HOSTEL
  BEDANDBREAKFAST
  MOTEL
  OTHER
}
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  type     PropertyType  @unique
  description String?
  properties Property[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("categories")
}

model Property {
  id        Int      @id @default(autoincrement())
  name      String
  description String?
  latitude  Float
  longitude Float
  location Json
  streetAddress String @map("street_address")
  facilities Json?
  roomCount Int @map("room_count")
  roomTypes RoomType[] 
  photos Images[]
  isDeleted Boolean  @default(true) @map("is_deleted")
  userId   Int      @map("user_id")
  user     User     @relation(fields: [userId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId Int     @map("category_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("properties")

}

model RoomType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  price     Float
  propertyId Int     @map("property_id")
  property Property @relation(fields: [propertyId], references: [id])
  rooms     Room[]
  photos Images[]
  specification Json?
  size Json?
  isDeleted Boolean  @default(true) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("room_types")
}
enum RoomStatus {
  AVAILABLE
  UNAVAILABLE
  RESERVED
  OCCUPIED
  CLEANING
  MAINTENANCE
  OTHER
}
model Room {
  id        Int      @id @default(autoincrement())
  status      RoomStatus
  roomType  RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId Int     @map("room_type_id")
  isActive Boolean  @default(true) @map("is_active")
  roomReserved RoomReserved[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("rooms")
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  propertyId Int    @map("property_id")
  property Property @relation(fields: [propertyId], references: [id])
  roomTypeId    Int     @map("room_id")
  RoomType      RoomType     @relation(fields: [roomTypeId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("images")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
  COMPLETED
}
model Reservation {
  id        Int      @id @default(autoincrement())
  checkIn   DateTime @map("check_in")
  checkOut  DateTime @map("check_out")
  specialRequest String? @map("special_request")
  status   ReservationStatus
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  roomReserved RoomReserved[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("reservations")
}

model RoomReserved {
  id        Int      @id @default(autoincrement())
  roomId    Int      @map("room_id")
  room Room @relation(fields: [roomId], references: [id])
  reservationId Int @map("reservation_id")
  reservation Reservation @relation(fields: [reservationId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("room_reserved")
}