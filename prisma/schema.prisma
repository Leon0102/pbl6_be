generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions","filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String   @id
  name  RoleType @unique
  users User[]

  @@map("roles")
}

model User {
  id                    Int           @id @default(autoincrement())
  email                 String        @unique
  name                  String?
  password              String
  phone                 String?
  isVerified            Boolean       @default(false) @map("is_verified")
  isDeleted             Boolean       @default(false) @map("is_deleted")
  point                 Int           @default(0)
  avatar                String?
  roleId                String        @default("guest") @map("role_id")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  role                  Role          @relation(fields: [roleId], references: [id])
  properties            Property[]
  reservations          Reservation[]

  @@map("users")
}

model Category {
  id          String     @id
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  properties  Property[]

  @@map("categories")
}

model Property {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  latitude      Float
  longitude     Float
  location      Json
  streetAddress String     @map("street_address")
  facilities    Json?
  roomCount     Int        @map("room_count")
  isDeleted     Boolean    @default(false) @map("is_deleted")
  userId        Int        @map("user_id")
  categoryId    String     @map("category_id")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  category      Category   @relation(fields: [categoryId], references: [id])
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos        Images[]
  roomTypes     RoomType[]

  @@map("properties")
}

model RoomType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Float
  propertyId  Int      @map("property_id")
  roomCount   Int      @map("room_count")
  description String
  facilities  Json?
  maxGuests   Int      @map("max_guests")
  size        Json?
  isDeleted   Boolean  @default(false) @map("is_deleted")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  photos      Images[]
  rooms       Room[]

  @@map("room_types")
}

model Room {
  id           Int            @id @default(autoincrement())
  name         String?
  status       RoomStatus     @default(AVAILABLE)
  roomTypeId   Int            @map("room_type_id")
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  roomType     RoomType       @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  roomReserved RoomReserved[]

  @@map("rooms")
}

model Images {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int      @map("property_id")
  roomTypeId Int      @map("room_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  RoomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Reservation {
  id             Int               @id @default(autoincrement())
  checkIn        DateTime          @map("check_in")
  checkOut       DateTime          @map("check_out")
  specialRequest String?           @map("special_request")
  status         ReservationStatus
  userId         Int               @map("user_id")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomReserved   RoomReserved[]

  @@map("reservations")
}

model RoomReserved {
  id            Int         @id @default(autoincrement())
  roomId        Int         @map("room_id")
  reservationId Int         @map("reservation_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  room          Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_reserved")
}

enum RoleType {
  ADMIN
  HOST
  GUEST
}

enum RoomStatus {
  AVAILABLE
  UNAVAILABLE
  RESERVED
  OCCUPIED
  CLEANING
  MAINTENANCE
  OTHER
}
model Room {
  id        Int      @id @default(autoincrement())
  name      String?
  status      RoomStatus @default(AVAILABLE)
  roomType  RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  roomTypeId Int     @map("room_type_id")
  isActive Boolean  @default(true) @map("is_active")
  roomReserved RoomReserved[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("rooms")
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  propertyId Int?    @map("property_id")
  property Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  roomTypeId    Int?     @map("room_id")
  RoomType      RoomType?     @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("images")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
  COMPLETED
}
